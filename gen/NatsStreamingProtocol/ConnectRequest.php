<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: protoc/nats_streaming.proto

namespace NatsStreamingProtocol;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Connection Request
 *
 * Generated from protobuf message <code>NatsStreamingProtocol.ConnectRequest</code>
 */
class ConnectRequest extends \Google\Protobuf\Internal\Message
{
    /**
     * Client name/identifier.
     *
     * Generated from protobuf field <code>string clientID = 1;</code>
     */
    private $clientID = '';
    /**
     * Inbox for server initiated heartbeats.
     *
     * Generated from protobuf field <code>string heartbeatInbox = 2;</code>
     */
    private $heartbeatInbox = '';
    /**
     * Protocol the client is at.
     *
     * Generated from protobuf field <code>int32 protocol = 3;</code>
     */
    private $protocol = 0;
    /**
     * Connection ID, a way to uniquely identify a connection (no connection should ever have the same)
     *
     * Generated from protobuf field <code>bytes connID = 4;</code>
     */
    private $connID = '';
    /**
     * Interval at which client wishes to send PINGs (expressed in seconds).
     *
     * Generated from protobuf field <code>int32 pingInterval = 5;</code>
     */
    private $pingInterval = 0;
    /**
     * Maximum number of PINGs without a response after which the connection can be considered lost.
     *
     * Generated from protobuf field <code>int32 pingMaxOut = 6;</code>
     */
    private $pingMaxOut = 0;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $clientID
     *           Client name/identifier.
     *     @type string $heartbeatInbox
     *           Inbox for server initiated heartbeats.
     *     @type int $protocol
     *           Protocol the client is at.
     *     @type string $connID
     *           Connection ID, a way to uniquely identify a connection (no connection should ever have the same)
     *     @type int $pingInterval
     *           Interval at which client wishes to send PINGs (expressed in seconds).
     *     @type int $pingMaxOut
     *           Maximum number of PINGs without a response after which the connection can be considered lost.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Protoc\NatsStreaming::initOnce();
        parent::__construct($data);
    }

    /**
     * Client name/identifier.
     *
     * Generated from protobuf field <code>string clientID = 1;</code>
     * @return string
     */
    public function getClientID()
    {
        return $this->clientID;
    }

    /**
     * Client name/identifier.
     *
     * Generated from protobuf field <code>string clientID = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setClientID($var)
    {
        GPBUtil::checkString($var, True);
        $this->clientID = $var;

        return $this;
    }

    /**
     * Inbox for server initiated heartbeats.
     *
     * Generated from protobuf field <code>string heartbeatInbox = 2;</code>
     * @return string
     */
    public function getHeartbeatInbox()
    {
        return $this->heartbeatInbox;
    }

    /**
     * Inbox for server initiated heartbeats.
     *
     * Generated from protobuf field <code>string heartbeatInbox = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setHeartbeatInbox($var)
    {
        GPBUtil::checkString($var, True);
        $this->heartbeatInbox = $var;

        return $this;
    }

    /**
     * Protocol the client is at.
     *
     * Generated from protobuf field <code>int32 protocol = 3;</code>
     * @return int
     */
    public function getProtocol()
    {
        return $this->protocol;
    }

    /**
     * Protocol the client is at.
     *
     * Generated from protobuf field <code>int32 protocol = 3;</code>
     * @param int $var
     * @return $this
     */
    public function setProtocol($var)
    {
        GPBUtil::checkInt32($var);
        $this->protocol = $var;

        return $this;
    }

    /**
     * Connection ID, a way to uniquely identify a connection (no connection should ever have the same)
     *
     * Generated from protobuf field <code>bytes connID = 4;</code>
     * @return string
     */
    public function getConnID()
    {
        return $this->connID;
    }

    /**
     * Connection ID, a way to uniquely identify a connection (no connection should ever have the same)
     *
     * Generated from protobuf field <code>bytes connID = 4;</code>
     * @param string $var
     * @return $this
     */
    public function setConnID($var)
    {
        GPBUtil::checkString($var, False);
        $this->connID = $var;

        return $this;
    }

    /**
     * Interval at which client wishes to send PINGs (expressed in seconds).
     *
     * Generated from protobuf field <code>int32 pingInterval = 5;</code>
     * @return int
     */
    public function getPingInterval()
    {
        return $this->pingInterval;
    }

    /**
     * Interval at which client wishes to send PINGs (expressed in seconds).
     *
     * Generated from protobuf field <code>int32 pingInterval = 5;</code>
     * @param int $var
     * @return $this
     */
    public function setPingInterval($var)
    {
        GPBUtil::checkInt32($var);
        $this->pingInterval = $var;

        return $this;
    }

    /**
     * Maximum number of PINGs without a response after which the connection can be considered lost.
     *
     * Generated from protobuf field <code>int32 pingMaxOut = 6;</code>
     * @return int
     */
    public function getPingMaxOut()
    {
        return $this->pingMaxOut;
    }

    /**
     * Maximum number of PINGs without a response after which the connection can be considered lost.
     *
     * Generated from protobuf field <code>int32 pingMaxOut = 6;</code>
     * @param int $var
     * @return $this
     */
    public function setPingMaxOut($var)
    {
        GPBUtil::checkInt32($var);
        $this->pingMaxOut = $var;

        return $this;
    }

}

